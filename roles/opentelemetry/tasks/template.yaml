- name: set fact
  set_fact:
    __path: ""

- name: set fact
  set_fact:
    __path: "{{ chart.local_dir.rstrip('/') }}/"
  when: chart.local_dir.strip() != ""

- name: set proxy fact
  set_fact:
    __proxy_env:
      HTTP_PROXY: "{{ chart.http_proxy.server }}"
      HTTPS_PROXY: "{{ chart.http_proxy.server }}"
      NO_PROXY: "{{ chart.http_proxy.no_proxy }}"
  when: chart.http_proxy.enabled == True

- name: template opentelemetry
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ service_mesh.opentelemetry.chart.path }}"
    chart_repo_url: "{{ service_mesh.opentelemetry.chart.repo }}"
    chart_version: "{{ service_mesh.opentelemetry.chart.version }}"
    release_values:
      manager:
        image:
          repository: "{{ service_mesh.repository }}ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator"
        collectorImage:
          repository: "{{ service_mesh.repository }}otel/opentelemetry-collector-contrib"
      testFramework:
        image:
          repository: "{{ service_mesh.repository }}busybox"
      kubeRBACProxy:
        image:
          repository: "{{ service_mesh.repository }}gcr.io/kubebuilder/kube-rbac-proxy"
  register: opentelemetry_template_result

- name: template
  template:
    src: ../templates/install.yaml.j2
    dest: /tmp/install.yaml

- name: get stdout
  shell: cat /tmp/install.yaml
  register: opentelemetry_other_1_result

- name: set facts
  set_fact:
    opentelemetry_template_stdout: "{{ opentelemetry_template_result.stdout_lines }}"
    opentelemetry_other_1_stdout: "{{ opentelemetry_other_1_result.stdout_lines }}"

- name: set facts
  set_fact:
    opentelemetry_other_2: "{{ opentelemetry_template_stdout | select('match', '.*image=.*') | join('\n') | regex_replace(' *- --collector-image=', '') }}"

- name: get images
  set_fact:
    opentelemetry_images: "{{ (((opentelemetry_template_stdout +  opentelemetry_other_1_stdout) | select('match', '.*image:.*') | list) + opentelemetry_other_2.split('\n')) | regex_replace(' *image: *', '') | replace('\"', '') }}"
