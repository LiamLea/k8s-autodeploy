apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ service_mesh.opentelemetry.collector.name }}
spec:
  mode: deployment  #daemonSet、sidecar、deployment (default)、statefulset
  podAnnotations:
    prometheus.io/port: "9464"
    prometheus.io/scrape: "true"
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:

    exporters:
      otlp:
        endpoint: "{{ service_mesh.opentelemetry.exporter.jaeger }}"  #比如发送到jaeger的collector
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:9464"    #prometheus需要配置：<ip>:9464/metrics

    processors:
      batch:
      spanmetrics:
        metrics_exporter: prometheus
        latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        dimensions_cache_size: 1000
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [spanmetrics, batch]
          exporters: [otlp]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]

---

apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: my-instrumentation
spec:
  #默认tracing、metrics、logging都会发往这个地址
  exporter:
    endpoint: {{ service_mesh.opentelemetry.exporter.collector }}
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler: {{ service_mesh.opentelemetry.sampler }}
  env:
  - name: OTEL_LOGS_EXPORTER
    value: none
  java:
    image: {{ service_mesh.opentelemetry.instrument.java.image }}
