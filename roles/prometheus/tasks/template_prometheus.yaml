- name: set fact
  set_fact:
    __path: ""

- name: set fact
  set_fact:
    __path: "{{ chart.local_dir.rstrip('/') }}/"
  when: chart.local_dir.strip() != ""

- name: set proxy fact
  set_fact:
    __proxy_env:
      HTTP_PROXY: "{{ chart.http_proxy.server }}"
      HTTPS_PROXY: "{{ chart.http_proxy.server }}"
      NO_PROXY: "{{ chart.http_proxy.no_proxy }}"
  when: chart.http_proxy.enabled == True

- name: template prometheus
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ monitor.prometheus.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.chart.repo }}"
    chart_version: "{{ monitor.prometheus.chart.version }}"
    release_values:
      alertmanager:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/alertmanager"
      configmapReload:
        prometheus:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
        alertmanager:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
          persistentVolume:
            storageClass: "{{ monitor.storage_class }}"
      nodeExporter:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/node-exporter"
      server:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/prometheus"
        persistentVolume:
          storageClass: "{{ monitor.storage_class }}"
      pushgateway:
        image:
          repository: "{{ monitor.repository }}prom/pushgateway"
          persistentVolume:
            storageClass: "{{ monitor.storage_class }}"
      kube-state-metrics:
        image:
          repository: "{{ monitor.repository }}k8s.gcr.io/kube-state-metrics/kube-state-metrics"
  register: prometheus_template_result

- name: template blackbox
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ monitor.prometheus.blackbox.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.blackbox.chart.repo }}"
    chart_version: "{{ monitor.prometheus.blackbox.chart.version }}"
    release_values:
      image:
        repository: "{{ monitor.repository }}prom/blackbox-exporter"
  register: blackbox_template_result

- name: template prometheus-adapter
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ monitor.prometheus.adapter.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.adapter.chart.repo }}"
    chart_version: "{{ monitor.prometheus.adapter.chart.version }}"
    release_values:
      image:
        repository: "{{ monitor.repository }}k8s.gcr.io/prometheus-adapter/prometheus-adapter"
  register: adapter_template_result

- name: install grafana
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ monitor.prometheus.grafana.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.grafana.chart.repo }}"
    chart_version: "{{ monitor.prometheus.grafana.chart.version }}"
    release_values:
      image:
        repository: "{{ monitor.repository }}grafana/grafana"
      testFramework:
        image: "{{ monitor.repository }}bats/bats"
      downloadDashboardsImage:
        repository: "{{ monitor.repository }}curlimages/curl"
      persistence:
        enabled: true
        storageClassName: "{{ monitor.storage_class }}"
      initChownData:
        image:
          repository: "{{ monitor.repository }}busybox"
      dashboardProviders:
       dashboardproviders.yaml:
         apiVersion: 1
         providers:
         - name: 'default'
           orgId: 1
           folder: ''
           type: file
           disableDeletion: false
           editable: true
           options:
             path: /var/lib/grafana/dashboards/default
      dashboards: "{{ monitor.prometheus.grafana.dashboards }}"
  register: grafana_template_result

- name: set facts
  set_fact:
    prometheus_template_stdout: "{{ prometheus_template_result.stdout_lines + blackbox_template_result.stdout_lines + adapter_template_result.stdout_lines + grafana_template_result.stdout_lines }}"

- name: get images
  set_fact:
    prometheus_images: "{{ prometheus_template_stdout | select('match', '.*image:.*') | list | regex_replace(' *image: *', '') | replace('\"', '')}}"
