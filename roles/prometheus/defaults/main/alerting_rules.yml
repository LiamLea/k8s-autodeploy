__config_alerting_rules:
  groups:

  #blackbox
  - name: blackbox rules
    rules:
    - alert: BlackboxProbeFailed
      annotations:
        summary: "{{ 'probe failed: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"
      expr: probe_success == 0
      for: 1m
      labels:
        severity: critical

    - alert: BlackboxSlowProbe
      expr: avg_over_time(probe_duration_seconds[1m]) > 1
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'slow probe: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: BlackboxProbeSlowPing
      expr: avg_over_time(probe_icmp_duration_seconds[1m]) > 1
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'slow ping: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: BlackboxProbeSlowHttp
      expr: avg_over_time(probe_http_duration_seconds[1m]) > 1
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'probe slow HTTP: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

  #Prometheus self-monitoring
  - name: Prometheus self-monitoring
    rules:
    - alert: PrometheusTooManyRestarts
      expr: changes(process_start_time_seconds{job=~"prometheus|pushgateway|alertmanager"}[15m]) > 2
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Prometheus too many restarts: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} in the last 15 minutes' }}"

    - alert: PrometheusJobMissing
      expr: absent(up{job="prometheus"})
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Prometheus job missing: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: PrometheusTargetMissing
      expr: up == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Prometheus target missing: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

  #Host and hardware
  - name: Host and hardware
    rules:
    - alert: HostOutOfMemory
      expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host out of memory: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostMemoryUnderMemoryPressure
      expr: rate(node_vmstat_pgmajfault[2m]) > 1000
      for: 2m
      labels:
        severity: warning
        servcie: host
      annotations:
        summary: "{{ 'Host memory under memory pressure: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostOomKillDetected
      expr: increase(node_vmstat_oom_kill[1m]) > 0
      for: 0m
      labels:
        severity: warning
        servcie: host
      annotations:
        summary: "{{ 'Host OOM kill detected: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} times in 1 minute' }}"

    - alert: HostUnusualNetworkThroughputIn
      expr: sum by (instance) (rate(node_network_receive_bytes_total{device !~ "^(cali|docker|lo|tun|br-|qbr|qvo|qvb|tap|ovs|veth).*"}[2m])) / 1024 / 1024 > 100
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual network throughput in: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}MB/s in 2 minutes' }}"

    - alert: HostUnusualNetworkThroughputOut
      expr: sum by (instance) (rate(node_network_transmit_bytes_total{device !~ "^(cali|docker|lo|tun|br-|qbr|qvo|qvb|tap|ovs|veth).*"}[2m])) / 1024 / 1024 > 100
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual network throughput out: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}MB/s in 2 minutes' }}"

    - alert: HostNetworkReceiveErrors
      expr: rate(node_network_receive_errs_total[2m]) / rate(node_network_receive_packets_total[2m]) > 0.01
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host Network Receive Errors: {{ $labels.instance }}' }}"
        description: "{{ '{{ printf \"%.0f\" $value }} in 2 minutes' }}"

    - alert: HostNetworkTransmitErrors
      expr: rate(node_network_transmit_errs_total[2m]) / rate(node_network_transmit_packets_total[2m]) > 0.01
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host Network Transmit Errors: {{ $labels.instance }}' }}"
        description: "{{ '{{ printf \"%.0f\" $value }} in 2 minutes' }}"

    - alert: HostNetworkInterfaceSaturated
      expr: (rate(node_network_receive_bytes_total{device!~"^tap.*"}[1m]) + rate(node_network_transmit_bytes_total{device!~"^tap.*"}[1m])) / node_network_speed_bytes{device!~"^tap.*"} > 0.8 < 10000
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host Network Interface Saturated: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} in 1 minute' }}"

    - alert: HostNetworkBondDegraded
      expr: (node_bonding_active - node_bonding_slaves) != 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host Network Bond Degraded: {{ $labels.instance }} {{ $labels.device }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostConntrackLimit
      expr: node_nf_conntrack_entries / node_nf_conntrack_entries_limit > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host conntrack limit: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostUnusualDiskReadRate
      expr: sum by (instance) (rate(node_disk_read_bytes_total[2m])) / 1024 / 1024 > 50
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual disk read rate: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}MB/s in 2 minutes' }}"

    - alert: HostUnusualDiskWriteRate
      expr: sum by (instance) (rate(node_disk_written_bytes_total[2m])) / 1024 / 1024 > 50
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual disk write rate: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}MB/s in 2 minutes' }}"

    - alert: HostOutOfDiskSpace
      expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 10 and ON (instance, device, mountpoint) node_filesystem_readonly == 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host out of disk space: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: HostDiskWillFillIn24Hours
      expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 10 and ON (instance, device, mountpoint) predict_linear(node_filesystem_avail_bytes{fstype!~"tmpfs"}[1h], 24 * 3600) < 0 and ON (instance, device, mountpoint) node_filesystem_readonly == 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host disk will fill in 24 hours: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: HostOutOfInodes
      expr: node_filesystem_files_free{mountpoint ="/rootfs"} / node_filesystem_files{mountpoint="/rootfs"} * 100 < 10 and ON (instance, device, mountpoint) node_filesystem_readonly{mountpoint="/rootfs"} == 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host out of inodes: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: HostInodesWillFillIn24Hours
      expr: node_filesystem_files_free{mountpoint ="/rootfs"} / node_filesystem_files{mountpoint="/rootfs"} * 100 < 10 and predict_linear(node_filesystem_files_free{mountpoint="/rootfs"}[1h], 24 * 3600) < 0 and ON (instance, device, mountpoint) node_filesystem_readonly{mountpoint="/rootfs"} == 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host inodes will fill in 24 hours: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: HostUnusualDiskReadLatency
      expr: rate(node_disk_read_time_seconds_total[1m]) / rate(node_disk_reads_completed_total[1m]) > 0.1 and rate(node_disk_reads_completed_total[1m]) > 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual disk read latency: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} seconds per read in 1 minute' }}"

    - alert: HostUnusualDiskWriteLatency
      expr: rate(node_disk_write_time_seconds_total[1m]) / rate(node_disk_writes_completed_total[1m]) > 0.1 and rate(node_disk_writes_completed_total[1m]) > 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host unusual disk write latency: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} seconds per write in 1 minute' }}"

    - alert: HostHighCpuLoad
      expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host high CPU load: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% usage in 2 minutes' }}"

    - alert: HostCpuStealNoisyNeighbor
      expr: avg by(instance) (rate(node_cpu_seconds_total{mode="steal"}[5m])) * 100 > 10
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host CPU steal noisy neighbor: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% usage in 5 minutes' }}"

    - alert: HostContextSwitching
      expr: (rate(node_context_switches_total[5m])) / (count without(cpu, mode) (node_cpu_seconds_total{mode="idle"})) > 10000
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host context switchings are  high: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} times/second per cpu in 5 minutes' }}"

    - alert: HostSystemdServiceCrashed
      expr: node_systemd_unit_state{state="failed"} == 1
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host systemd service crashed: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostPhysicalComponentTooHot
      expr: node_hwmon_temp_celsius > 75
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host physical component too hot: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} centigrade' }}"

    - alert: HostNodeOvertemperatureAlarm
      expr: node_hwmon_temp_crit_alarm_celsius == 1
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Host node overtemperature alarm: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostEdacCorrectableErrorsDetected
      expr: increase(node_edac_correctable_errors_total[1m]) > 0
      for: 0m
      labels:
        severity: info
      annotations:
        summary: "{{ 'Host EDAC Correctable Errors detected: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} in 1 minute' }}"

    - alert: HostEdacUncorrectableErrorsDetected
      expr: node_edac_uncorrectable_errors_total > 0
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host EDAC Uncorrectable Errors detected: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: HostClockSkew
      expr: (node_timex_offset_seconds > 0.05 and deriv(node_timex_offset_seconds[5m]) >= 0) or (node_timex_offset_seconds < -0.05 and deriv(node_timex_offset_seconds[5m]) <= 0)
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host clock skew: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} offset seconds' }}"

    - alert: HostClockNotSynchronising
      expr: min_over_time(node_timex_sync_status[1m]) == 0 and node_timex_maxerror_seconds >= 16
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Host clock not synchronising: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

  - name: kubernetes
    rules:
    - alert: KubernetesNodeReady
      expr: kube_node_status_condition{condition="Ready",status="true"} == 0
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes Node ready: {{ $labels.node }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesMemoryPressure
      expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes memory pressure: {{ $labels.node }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesDiskPressure
      expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes disk pressure: {{ $labels.node }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesOutOfDisk
      expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes out of disk: {{ $labels.node }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesOutOfCapacity
      expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes out of capacity: {{ $labels.node }}' }}"
        description: "{{ 'VALUE = {{ $value }} pods' }}"

    - alert: KubernetesContainerOomKiller
      expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes container oom killer: {{ $labels.namespace }}/{{ $labels.pod }}' }}"
        description: "{{ 'Container = {{ $labels.container }}' }}"

    - alert: KubernetesJobFailed
      expr: kube_job_status_failed > 0
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes Job failed: {{$labels.namespace}}/{{$labels.exported_job}}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesCronjobSuspended
      expr: kube_cronjob_spec_suspend != 0
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes CronJob suspended: {{ $labels.namespace }}/{{ $labels.cronjob }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesPersistentvolumeclaimPending
      expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes PersistentVolumeClaim pending: {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesVolumeOutOfDiskSpace
      expr: kubelet_volume_stats_available_bytes / kubelet_volume_stats_capacity_bytes * 100 < 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes Volume out of disk space: {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: KubernetesVolumeFullInOneDay
      expr: predict_linear(kubelet_volume_stats_available_bytes[6h], 1 * 24 * 3600) < 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes Volume full in one day: {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }}' }}"
        description: "{{ 'VALUE = {{ $value | humanize }} bytes free' }}"

    - alert: KubernetesPersistentVolumeError
      expr: kube_persistentvolume_status_phase{phase=~"Failed|Pending"} > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes PersistentVolume error: {{ $labels.namespace }}/{{ $labels.persistentvolume }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesStatefulsetDown
      expr: (kube_statefulset_status_replicas_ready / kube_statefulset_status_replicas_current) != 1
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes StatefulSet down: {{ $labels.namespace }}/{{ $labels.statefulset }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesHpaScalingUnavailable
      expr: kube_horizontalpodautoscaler_status_condition{status="false", condition="AbleToScale"} == 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'HPA is unable to scale: {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesHpaMetricUnavailable
      expr: kube_horizontalpodautoscaler_status_condition{status="false", condition="ScalingActive"} == 1
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'HPA is unable to collect metrics: {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesHpaScaleCapability
      expr: kube_horizontalpodautoscaler_status_desired_replicas >= kube_horizontalpodautoscaler_spec_max_replicas
      for: 2m
      labels:
        severity: info
      annotations:
        summary: "{{ 'The maximum number of desired Pods has been hit: {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesPodNotHealthy
      expr: sum_over_time(sum by (namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"})[5m:1m]) > 5
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes Pod not healthy: {{ $labels.namespace }}/{{ $labels.pod }}' }}"
        description: "Pod has been in a non-ready state for longer than 5 minutes"

    - alert: KubernetesPodCrashLooping
      expr: kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff"}
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes pod crash looping: {{ $labels.namespace }}/{{ $labels.pod }}' }}"
        description: "{{ 'VALUE = {{ $value }} times restarts' }}"

    - alert: KubernetesReplicassetMismatch
      expr: kube_replicaset_spec_replicas != kube_replicaset_status_ready_replicas
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes ReplicasSet mismatch: {{ $labels.namespace }}/{{ $labels.replicaset }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesDeploymentReplicasMismatch
      expr: kube_deployment_spec_replicas != kube_deployment_status_replicas_available
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes Deployment replicas mismatch: {{ $labels.namespace }}/{{ $labels.deployment }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesStatefulsetReplicasMismatch
      expr: kube_statefulset_status_replicas_ready != kube_statefulset_status_replicas
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes StatefulSet replicas mismatch: {{ $labels.namespace }}/{{ $labels.statefulset }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesDeploymentGenerationMismatch
      expr: kube_deployment_status_observed_generation != kube_deployment_metadata_generation
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes Deployment generation mismatch: {{ $labels.namespace }}/{{ $labels.deployment }}' }}"
        description: "A Deployment has failed but has not been rolled back"

    - alert: KubernetesStatefulsetGenerationMismatch
      expr: kube_statefulset_status_observed_generation != kube_statefulset_metadata_generation
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes StatefulSet generation mismatch: {{ $labels.namespace }}/{{ $labels.statefulset }}' }}"
        description: "A StatefulSet has failed but has not been rolled back."

    - alert: KubernetesStatefulsetUpdateNotRolledOut
      expr: max without (revision) (kube_statefulset_status_current_revision unless kube_statefulset_status_update_revision) * (kube_statefulset_replicas != kube_statefulset_status_replicas_updated)
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes StatefulSet update not rolled out: {{ $labels.namespace }}/{{ $labels.statefulset }}' }}"
        description: "StatefulSet update has not been rolled out."

    - alert: KubernetesDaemonsetRolloutStuck
      expr: kube_daemonset_status_number_ready / kube_daemonset_status_desired_number_scheduled * 100 < 100 or kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_current_number_scheduled > 0
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes DaemonSet rollout stuck: {{ $labels.namespace }}/{{ $labels.daemonset }}' }}"
        description: "Some Pods of DaemonSet are not scheduled or not ready."

    - alert: KubernetesDaemonsetMisscheduled
      expr: kube_daemonset_status_number_misscheduled > 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes DaemonSet misscheduled: {{ $labels.namespace }}/{{ $labels.daemonset }}' }}"
        description: "Some DaemonSet Pods are running where they are not supposed to run."

    - alert: KubernetesCronjobTooLong
      expr: time() - kube_cronjob_next_schedule_time > 3600
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes CronJob too long: {{ $labels.namespace }}/{{ $labels.cronjob }}' }}"
        description: "{{ 'VALUE = {{ $value }} seconds' }}"

    #当达到设置的时间，如果job没有执行结束会关闭，并且会标记为完成（但不会标记为成功）
    - alert: KubernetesJobRunTimeout
      expr: kube_job_spec_completions - kube_job_status_succeeded > 0
      for: 12h
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes job runs timeout: {{ $labels.namespace }}/{{ $labels.job_name }}' }}"
        description: "Kubernetes Job reached the timeout and didn't succeed"

    - alert: KubernetesPodRestarted
      expr: increase(kube_pod_container_status_restarts_total[1m]) + on(pod,container) group_left(reason) kube_pod_container_status_last_terminated_reason > 1
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes pod restarted: {{ $labels.namespace }}/{{ $labels.pod }}' }}"
        description: "{{ 'REASON = {{ $labels.reason }} '}}"

    - alert: KubernetesTooManyPodsRestarted
      expr: count(increase(kube_pod_container_status_restarts_total[5m]) > 0) > 10
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes too many pods restarted' }}"
        description: "{{ '{{ $value }} pods restarted in 5 minutes'}}"

  - name: apiserver
    rules:
    - alert: KubernetesApiServerErrors
      expr: sum(rate(apiserver_request_total{job="kubernetes-apiservers",code=~"^(?:5..)$"}[1m])) by(instance, job) / sum(rate(apiserver_request_total{job="kubernetes-apiservers"}[1m])) by(instance, job) * 100 > 3
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes API server errors: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}%' }}"

    - alert: KubernetesApiClientErrors
      expr: (sum(rate(rest_client_requests_total{code=~"(4|5).."}[1m])) by (instance, job) / sum(rate(rest_client_requests_total[1m])) by (instance, job)) * 100 > 1
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes API client errors: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}%' }}"

    - alert: KubernetesClientCertificateExpiresNextWeek
      expr: apiserver_client_certificate_expiration_seconds_count{job="kubernetes-apiservers"} > 0 and histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="kubernetes-apiservers"}[5m]))) < 7*24*60*60
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes client certificate expires next week: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesClientCertificateExpiresSoon
      expr: apiserver_client_certificate_expiration_seconds_count{job="kubernetes-apiservers"} > 0 and histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="kubernetes-apiservers"}[5m]))) < 24*60*60
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Kubernetes client certificate expires in 24 hours: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: KubernetesApiServerLatency
      #origin: >1 for 2m
      expr: histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{verb!~"CONNECT|WATCH"}[5m])) by (le, instance)) > 3
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes API server latency: {{ $labels.instance }}' }}"
        description: "{{ '99% latency of VALUE = {{ $value }} seconds' }}"

    - alert: KubernetesApiServerRequestEtcdLatency
      #origin: >1 for 2m
      expr: histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket[5m])) by (le, instance)) > 3
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Kubernetes request ectd latency: {{ $labels.instance }}' }}"
        description: "{{ '99% latency of VALUE = {{ $value }} seconds' }}"

  - name: etcd
    rules:
    - alert: EtcdInsufficientMembers
      expr: sum(up{job=~".*etcd.*"} == bool 1) by (job) < ((count(up{job=~".*etcd.*"}) by (job) + 1) / 2)
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Etcd insufficient Members: {{ $labels.job }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: EtcdNoLeader
      expr: etcd_server_has_leader == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Etcd no Leader: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: EtcdHighNumberOfLeaderChanges
      expr: rate(etcd_server_leader_changes_seen_total{job=~".*etcd.*"}[15m]) > 3
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high number of leader changes: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} times in 15 minutes' }}"

    - alert: EtcdHighNumberOfFailedGrpcRequests
      expr: sum(rate(grpc_server_handled_total{grpc_code!="OK"}[1m])) BY (grpc_service, grpc_method, instance) / sum(rate(grpc_server_handled_total[1m])) BY (grpc_service, grpc_method, instance) * 100> 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high number of failed GRPC requests: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% in 1 minute' }}"

    - alert: EtcdHighNumberOfFailedGrpcRequests
      expr: sum(rate(grpc_server_handled_total{grpc_code!="OK"}[1m])) BY (grpc_service, grpc_method, instance) / sum(rate(grpc_server_handled_total[1m])) BY (grpc_service, grpc_method, instance) * 100 > 5
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Etcd high number of failed GRPC requests: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% in 1 minute' }}"

    - alert: EtcdGrpcRequestsSlow
      expr: histogram_quantile(0.99, sum(rate(grpc_server_handling_seconds_bucket{grpc_type="unary"}[1m])) by (grpc_service, grpc_method, le)) > 0.15
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd GRPC requests slow: {{ $labels.instance }}' }}"
        description: "{{ '99th percentile is over VALUE = {{ $value }} seconds in 1 minute' }}"

    - alert: EtcdHighNumberOfFailedHttpRequests
      expr: sum(rate(etcd_http_failed_total[1m])) BY (method) / sum(rate(etcd_http_received_total[1m])) BY (method) * 100 > 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high number of failed HTTP requests: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% in 1 minute' }}"

    - alert: EtcdHighNumberOfFailedHttpRequests
      expr: sum(rate(etcd_http_failed_total[1m])) BY (method) / sum(rate(etcd_http_received_total[1m])) BY (method) > 0.05
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Etcd high number of failed HTTP requests: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% in 1 minute' }}"

    - alert: EtcdHttpRequestsSlow
      expr: histogram_quantile(0.99, rate(etcd_http_successful_duration_seconds_bucket[1m])) > 0.15
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd HTTP requests slow: {{ $labels.instance }}' }}"
        description: "{{ '99th percentile is over VALUE = {{ $value }} seconds in 1 minute' }}"

    - alert: EtcdMemberCommunicationSlow
      expr: histogram_quantile(0.99, rate(etcd_network_peer_round_trip_time_seconds_bucket[1m])) > 0.15
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd member communication slow: {{ $labels.instance }}' }}"
        description: "{{ '99th percentile is over VALUE = {{ $value }} seconds in 1 minute' }}"

    - alert: EtcdHighNumberOfFailedProposals
      #origin: >5 in 1h for 2m
      expr: increase(etcd_server_proposals_failed_total[10m]) > 5
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high number of failed proposals: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} times in 10 minutes' }}"

    - alert: EtcdHighFsyncDurations
      expr: histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[1m])) > 0.5
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high fsync durations: {{ $labels.instance }}' }}"
        description: "{{ '99th percentile is over VALUE = {{ $value }} seconds in 1 minute' }}"

    - alert: EtcdHighCommitDurations
      #origin: >0.25 for 2m
      expr: histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket[1m])) > 0.5
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Etcd high commit durations: {{ $labels.instance }}' }}"
        description: "{{ '99th percentile is over VALUE = {{ $value }} seconds in 1 minute' }}"

  - name: ceph
    rules:
    - alert: CephState
      expr: ceph_health_status != 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Ceph unhealthy: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}' }}"

    - alert: CephMonitorClockSkew
      expr: abs(ceph_monitor_clock_skew_seconds) > 0.2
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph monitor clock skew: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }} seconds'}}"

    - alert: CephMonitorLowSpace
      expr: ceph_monitor_avail_percent < 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph monitor low space: {{ $labels.instance }}' }}"
        description: "{{ 'VALUE = {{ $value }}% free' }}"

    - alert: CephOsdDown
      expr: ceph_osd_up == 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Ceph OSD Down: {{ $labels.instance }} {{ $labels.ceph_daemon }}' }}"
        description: "{{ 'OSD = {{ $labels.ceph_daemon }}' }}"

    - alert: CephHighOsdLatency
      expr: ceph_osd_perf_apply_latency_seconds > 5
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph high OSD latency: {{ $labels.instance }} {{ $labels.ceph_daemon }}' }}"
        description: "{{ 'VALUE = {{ $value }} seconds latency' }}"

    - alert: CephOsdLowSpace
      expr: ceph_osd_utilization > 90
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph OSD low space: {{ $labels.instance }} {{ $labels.ceph_daemon }}' }}"
        description: "{{ 'VALUE = {{ $value }}% utilization' }}"

    - alert: CephOsdReweighted
      expr: ceph_osd_weight < 1
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph OSD reweighted: {{ $labels.instance }} {{ $labels.ceph_daemon }}' }}"
        description: "{{ 'VALUE = {{ $value }} weight for 10 minutes' }}"

    - alert: CephPgDown
      expr: ceph_pg_down > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Ceph PG down: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

    - alert: CephPgIncomplete
      expr: ceph_pg_incomplete > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Ceph PG incomplete: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

    - alert: CephPgInconsistent
      expr: ceph_pg_inconsistent > 0
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph PG inconsistent: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

    - alert: CephPgActivationLong
      expr: ceph_pg_activating > 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph PG activation long: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

    - alert: CephPgBackfillFull
      expr: ceph_pg_backfill_toofull > 0
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'Ceph PG backfill full: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

    - alert: CephPgUnavailable
      expr: ceph_pg_total - ceph_pg_active > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'Ceph PG unavailable: {{ $labels.instance }} pool_id = {{ $labels.pool_id }}' }}"
        description: "{{ 'VALUE = {{ $value }} PGs' }}"

  #source: https://monitoring.mixins.dev/coredns/
  - name: codeDNS
    rules:
    - alert: CoreDNSDown
      expr: up{k8s_app="kube-dns"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'CoreDNS is Down'}}"
        description: "{{ 'CoreDNS has been down for 1 minute' }}"

    - alert: CoreDNSLatencyHigh
      expr: histogram_quantile(0.99, sum(rate(coredns_dns_request_duration_seconds_bucket{k8s_app="kube-dns"}[5m])) by(server, zone, le)) > 4
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'CoreDNS has high latency for server: {{ $labels.server }}' }}"
        description: "{{ 'SERVER = {{ $labels.server }} ZONE = {{ $labels.zone }} has 99th percentile latency of VALUE = {{ $value }} seconds' }}"

    - alert: CoreDNSErrorsHigh
      expr: sum(rate(coredns_dns_responses_total{k8s_app="kube-dns",rcode="SERVFAIL"}[5m])) / sum(rate(coredns_dns_responses_total{k8s_app="kube-dns"}[5m])) > 0.01
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: CodeDNS has high errors
        description: "{{ 'VALUE = {{ $value | humanizePercentage }}%' }}"

    - alert: CoreDNSForwardLatencyHigh
      expr: histogram_quantile(0.99, sum(rate(coredns_forward_request_duration_seconds_bucket{k8s_app="kube-dns"}[5m])) by(to, le)) > 4
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "{{ 'CoreDNS has high latency for forward to: {{ $labels.to }}' }}"
        description: "{{ 'FORWARD = {{ $labels.to }} has 99th percentile latency of VALUE = {{ $value }} seconds' }}"

    - alert: CoreDNSForwardErrorsHigh
      expr: sum(rate(coredns_forward_responses_total{k8s_app="kube-dns",rcode="SERVFAIL"}[5m])) / sum(rate(coredns_forward_responses_total{k8s_app="kube-dns"}[5m])) > 0.01
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: CodeDNS Forward has high errors
        description: "{{ 'VALUE = {{ $value | humanizePercentage }}%' }}"

    #number of failed health checks per upstream
    - alert: CoreDNSForwardHealthcheckFailureCount
      expr: sum(rate(coredns_forward_healthcheck_failures_total{k8s_app="kube-dns"}[1m])) by (to) > 0
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'upstream server health check failed: {{ $labels.to }}' }}"
        description: "{{ 'failed for 15 minutes' }}"

    #counter of when all upstreams are unhealthy, and we are randomly (this always uses the random policy) spraying to an upstream
    - alert: CoreDNSForwardHealthcheckBrokenCount
      expr: sum(rate(coredns_forward_healthcheck_broken_total{k8s_app="kube-dns"}[2m]))by(instance) > 0
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "{{ 'All upstream server health check failed' }}"
        description: "{{ 'failed for 5 minutes' }}"