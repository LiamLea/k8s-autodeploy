- block:
  - name: download istioctl binaries
    unarchive:
      src: "https://github.com/istio/istio/releases/download/{{ service_mesh.istio.version }}/istioctl-{{ service_mesh.istio.version }}-linux-{{ go_arch }}.tar.gz"
      dest: "{{ service_mesh.istio.install_path }}"
      mode: 0755
      remote_src: yes
  when: service_mesh.istio.local_path.strip() == ""

- name: copy istioctl binaries
  copy:
    src: "{{ service_mesh.istio.local_path }}"
    dest: "{{ service_mesh.istio.install_path }}"
    mode: 0755
    force: yes
  when: service_mesh.istio.local_path.strip() != ""

- name: copy istio profile
  template:
    src: profile.yaml.j2
    dest: /tmp/istio_profile.yaml

- name: create namespace
  shell: "kubectl create ns {{ service_mesh.namespace }}"
  ignore_errors: true

- name: install istio
  shell: "istioctl install -y -f /tmp/istio_profile.yaml"

- name: copy config file
  template:
    src: telemetry.yaml.j2
    dest: /tmp/istio_telemetry.yaml

- name: apply config  file
  shell: "kubectl apply -f /tmp/istio_telemetry.yaml -n {{ service_mesh.namespace }}"

- name: install kiali
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ service_mesh.istio.kiali.chart.path }}"
    chart_repo_url: "{{ service_mesh.istio.kiali.chart.repo }}"
    chart_version: "{{ service_mesh.istio.kiali.chart.version }}"
    release_name: "{{ service_mesh.istio.kiali.name }}"
    release_namespace: "{{ service_mesh.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      deployment:
        image_name: "{{ service_mesh.repository }}quay.io/kiali/kiali"
        image_pull_policy: "IfNotPresent"
        resources: "{{ service_mesh.istio.kiali.resources }}"
        ingress:
          enabled: "{{ ingress.enabled }}"
          class_name: "{{ ingress.class_name }}"
          override_yaml:
            metadata:
              annotations:
                cert-manager.io/cluster-issuer: "{{ ingress.cluster_issuer }}"
      server:
        web_root: "{{ ingress.hosts.kiali.path }}"
        web_fqdn: "{{ __kiali_hosts[0] }}"
      external_services:
        prometheus:
          url: "{{ service_mesh.istio.integrations.prometheus }}"
        tracing:
          enabled: true
          use_grpc: true
          in_cluster_url: "{{ service_mesh.istio.integrations.jaeger.in }}"
          url: "{{ service_mesh.istio.integrations.jaeger.external }}"
        grafana:
          enabled: true
          in_cluster_url: "{{ service_mesh.istio.integrations.grafana.in }}"
          url: "{{ service_mesh.istio.integrations.grafana.external }}"
      kiali_feature_flags:
        clustering:
          autodetect_secrets:
            #安装chart时，有bug，暂时设为false
            enabled: false
      auth:
        #当使用token时，不能指定token，只能使用生成的token
        strategy: "anonymous"
