- name: set fact
  set_fact:
    __path: ""

- name: set fact
  set_fact:
    __path: "{{ chart.local_dir.rstrip('/') }}/"
  when: chart.local_dir.strip() != ""

- name: set proxy fact
  set_fact:
    __proxy_env:
      HTTP_PROXY: "{{ chart.http_proxy.server }}"
      HTTPS_PROXY: "{{ chart.http_proxy.server }}"
      NO_PROXY: "{{ chart.http_proxy.no_proxy }}"
  when: chart.http_proxy.enabled == True

- name: template adminer
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ service.tools.adminer.chart.path }}"
    chart_repo_url: "{{ service.tools.adminer.chart.repo }}"
    chart_version: "{{ service.tools.adminer.chart.version }}"
    release_values:
      image:
        repository: "{{ service.repository }}dockette/adminer"
  register: adminer_template_result

- name: template redis-commander
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ service.tools.redis.chart.path }}"
    chart_repo_url: "{{ service.tools.redis.chart.repo }}"
    chart_version: "{{ service.tools.redis.chart.version }}"
    release_values:
      image:
        repository: "{{ service.repository }}rediscommander/redis-commander"
        pullPolicy: IfNotPresent
      redis: {}
  register: rediscommander_template_result

- name: template kafka-ui
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm_template:
    chart_ref: "{{ __path }}{{ service.tools.kafka.chart.path }}"
    chart_repo_url: "{{ service.tools.kafka.chart.repo }}"
    chart_version: "{{ service.tools.kafka.chart.version }}"
    release_values:
      image:
        registry: "{{ service.repository }}"
      yamlApplicationConfig:
        kafka:
          clusters: "{{ service.tools.kafka.kafka_clusters }}"
        spring:
          security:
            user:
              name: "{{ service.tools.kafka.auth.user }}"
              password: "{{ service.tools.kafka.auth.password }}"
        auth:
          type: LOGIN_FORM
        management:
          health:
            ldap:
              enabled: false
      ingress:
        enabled: "{{ ingress.enabled }}"
        annotations:
          cert-manager.io/cluster-issuer: "{{ ingress.cluster_issuer }}"
        ingressClassName: "{{ ingress.class_name }}"
        path: "{{ ingress.hosts['kafka-ui'].path }}"
        host: ""
        tls:
          enable: true
          secretName: "kafka-ui-ingress-secret"
  register: kafkaui_template_result

- name: set facts
  set_fact:
    tools_template_stdout: "{{ adminer_template_result.stdout_lines + rediscommander_template_result.stdout_lines + kafkaui_template_result.stdout_lines }}"

- name: get images
  set_fact:
    tools_images: "{{ tools_template_stdout | select('match', '.*image:.*') | list | regex_replace(' *image: *', '') | replace('\"', '')}}"
